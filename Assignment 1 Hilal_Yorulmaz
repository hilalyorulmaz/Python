{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b9450f9a-d193-47da-940e-bc49da4ded6b",
   "metadata": {},
   "source": [
    "Question 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23ab80d1-b11f-41e1-abe1-ecc5cb919c6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Guess a number between 1 and 20.\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def number_guess():\n",
    "    correct_number = random.randint(1, 20)\n",
    "    guessed_correctly = False\n",
    "\n",
    "    print(\"Guess a number between 1 and 20.\")\n",
    "\n",
    "    while not guessed_correctly:\n",
    "        guess = int(input(\"Enter your guess: \"))\n",
    "\n",
    "        if guess < correct_number:\n",
    "            print(\"Too low\")\n",
    "        elif guess > correct_number:\n",
    "            print(\"Too high\")\n",
    "        else:\n",
    "            print(\"True\")\n",
    "            guessed_correctly = True\n",
    "\n",
    "number_guess()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1591196-2daf-4624-ac74-fb3175cc21d2",
   "metadata": {},
   "source": [
    "Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d25d2133-75f1-414f-b498-f625de6d7981",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "0\n",
      "3\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "def insert_position(nums, target):\n",
    "    for i in range(len(nums)): \n",
    "        if nums[i] >= target:\n",
    "            return i\n",
    "    return len(nums)\n",
    "    \n",
    "print(insert_position([2, 4, 7, 9], 4))  # Output: 1\n",
    "print(insert_position([2, 4, 7, 9], 2))  # Output: 0\n",
    "print(insert_position([2, 4, 7, 9], 9))  # Output: 3\n",
    "print(insert_position([2, 4, 7, 9], 0))  # Output: 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "541cbda1-9a3a-429c-84ad-e57138ac0570",
   "metadata": {},
   "source": [
    "Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2253235e-ff4c-4345-9f1d-b385066df649",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_binary(a,b):\n",
    "    sum_bin = bin(int(a, 2) + int(b, 2))[2:]\n",
    "    return sum_bin\n",
    "a = \"01\"\n",
    "b = \"1\"\n",
    "print(add_binary(a, b))  #Output:10\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78682ab6-59b0-4196-9dc0-16f82d9a8930",
   "metadata": {},
   "source": [
    "Question 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cc75b68-cc56-490c-bd9e-b4264667627d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_single_one(numbers):\n",
    "    result = 0\n",
    "    for num in numbers:\n",
    "        result ^= num  \n",
    "    return result\n",
    "\n",
    "numbers = [5, 2, 3, 3, 2, 4, 6, 6, 4, 1, 1]\n",
    "print(find_single_number(numbers)) #Output: 5\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bb90b87-1632-48b7-b2e0-2c987bd96ed7",
   "metadata": {},
   "source": [
    "Question 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "74ce0872-afdc-413e-8690-eb31629f06f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['GATTACAGAT', 'ATTACAGATT', 'TTACAGATTA']\n"
     ]
    }
   ],
   "source": [
    "def DnaSequences(s: str):\n",
    "    sequences = []  \n",
    "    repeated = []  \n",
    "    for i in range(len(s) - 9):  \n",
    "        seq = s[i:i+10]  \n",
    "        if seq in sequences and seq not in repeated:\n",
    "            repeated.append(seq)  \n",
    "        elif seq not in sequences:\n",
    "            sequences.append(seq)  \n",
    "    return repeated  \n",
    "\n",
    "s = \"GATTACAGATTACAGATTAGGATTACAGGATTA\"\n",
    "print(DnaSequences(s))  \n",
    "#Output: 'GATTACAGAT', 'ATTACAGATT', 'TTACAGATTA'"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
